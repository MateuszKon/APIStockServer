import functools
import requests

from APIStockServer.DataAcquisition import ApiRequest, IPreciousMetalSpotData


# Not using decorator package because of exception generation on calling decorated function
# (which appear to have missing argument when called - this missing argument is generated by decorator: self._init_req)
def api_request(function):
    @functools.wraps(function)
    def wrapper(self, *args, **kwargs):
        """
        Raises exception contained in API response (if exist) and return JSON version of response
        """
        response = function(self, self._init_req(), *args, **kwargs)
        response.raise_for_status()
        return response.json()
    return wrapper


class GoldApi(ApiRequest, IPreciousMetalSpotData):

    def __init__(self, auth_key):
        headers = {"x-access-token": auth_key, "Content-Type": "application/json"}
        super().__init__(auth_key, headers)

    @api_request
    def current_quote(self, request: requests.Session, asset_name):
        # response = requests.get(f'https://www.goldapi.io/api/{asset_name}/USD', headers=self._headers)
        response = request.get(f'https://www.goldapi.io/api/{asset_name}/USD')
        # {'timestamp': 1646564733, 'metal': 'XAG', 'currency': 'USD', 'exchange': 'FOREXCOM',
        # 'symbol': 'FOREXCOM:XAGUSD', 'prev_close_price': 25.184, 'open_price': 25.184, 'low_price': 25.046,
        # 'high_price': 25.745, 'open_time': 1646352000, 'price': 25.711, 'ch': 0.527, 'chp': 2.09, 'ask': 25.74,
        # 'bid': 25.682}
        return response

    def current_spot_price(self, asset_name):
        return self.current_quote(asset_name)['price']


if __name__ == "__main__":
    key_path = "../../data/goldapi_key"
    with open(key_path) as f_r:
        key = f_r.readline()
    api = GoldApi(key)

    # Gold price
    print("Gold:")
    spot_price = api.current_spot_price("XAU")
    print(spot_price)
