import functools
import requests

from request_api import ApiRequest


# Not using decorator package because of exception generation on calling decorated function
# (which appear to have missing argument when called - this missing argument is generated by decorator: cls._init_req())
def api_request(function):
    @functools.wraps(function)
    def wrapper(self, *args, **kwargs):
        """
        Adds self._init_req() as first positional argument to function, raises exception contained in API response (if
        exist) and return JSON version of response
        :param self: Finnhub class
        """
        response = function(self, self._init_req(), *args, **kwargs)
        response.raise_for_status()
        return response.json()
    return wrapper


class Finnhub(ApiRequest):

    def __init__(self, auth_key):
        super().__init__(auth_key)
        self._headers = {"X-Finnhub-Token": self._auth_key, 'Content-type': 'application/json'}

    def _init_req(self) -> requests.Session:
        s = requests.Session()
        s.headers.update(self._headers)
        return s

    @api_request
    def request_test(self, request: requests.Session, name=None):
        if name:
            api_url = f"https://finnhub.io/api/v1/search?q={name}"
        else:
            api_url = "https://finnhub.io/api/v1/search"
        response = request.get(api_url)
        return response

    @api_request
    def current_quote(self, request: requests.Session, name):
        api_url = f"https://finnhub.io/api/v1/quote?symbol={name}"
        response = request.get(api_url)
        return response

    def current_price(self, asset_name):
        return self.current_quote(asset_name)['c']


if __name__ == "__main__":
    key_path = "../../data/finnhub_key"
    with open(key_path) as f_r:
        key = f_r.readline()
    api = Finnhub(key)

    price = api.current_price("PHYS")
    print(price)
