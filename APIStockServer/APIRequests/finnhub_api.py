from datetime import datetime
import functools
import os.path
import requests

from APIStockServer.modules.util import get_environ_file_path


# Not using decorator package because of exception generation on calling decorated function
# (which appear to have missing argument when called - this missing argument is generated by decorator: cls._init_req())
def api_request(function):
    @functools.wraps(function)
    def wrapper(cls, *args, **kwargs):
        """
        :param cls: ApiHandler class
        """
        try:
            cls._auth_key_file() if not cls._is_auth_key() else None
            return function(cls, cls._init_req(), *args, **kwargs)
        except KeyError as e:
            raise Exception('Request cannot be performed due to authentication key missing.').\
                with_traceback(e.__traceback__)
    return wrapper


class Finnhub:

    __AUTH_KEY = None

    @classmethod
    def _is_auth_key(cls):
        """
        Checks if authentication key is already read into application
        :return: True or False
        """
        return True if cls.__AUTH_KEY else False

    @classmethod
    def _auth_key_file(cls):
        """
        Gets authentication key from file defined by environment variable 'APISTOCK_KEY_FILE'
        """
        try:
            # root_path is parent folder of folder containing finhub_api.py
            root_path = os.path.dirname(os.path.realpath(__file__))
            root_path = os.path.dirname(root_path)
            file_path = get_environ_file_path("APISTOCK_KEY_FILE",
                                              root_path=root_path)
            with open(file_path) as f_r:
                key = f_r.readline()
                if key:
                    cls.__AUTH_KEY = key
                else:
                    raise KeyError(f"File {file_path} does not contain valid authentication key!")
        except KeyError as e:
            raise Exception('Check README.md file for more information.').with_traceback(e.__traceback__)

    @classmethod
    def _init_req(cls) -> requests.Session:
        s = requests.Session()
        s.headers.update({"X-Finnhub-Token": cls.__AUTH_KEY, 'Content-type': 'application/json'})
        return s

    @classmethod
    @api_request
    def request_test(cls, request: requests.Session, name=None):
        if name:
            api_url = f"https://finnhub.io/api/v1/search?q={name}"
        else:
            api_url = "https://finnhub.io/api/v1/search"
        response = request.get(api_url)
        return response.json()

    @classmethod
    @api_request
    def current_price(cls, request: requests.Session, name): #, start_date: datetime):
        # start_date_str = str(int(start_date.timestamp()))
        # end_date_str = str(int(datetime.today().timestamp()))
        # api_url = f"https://finnhub.io/api/v1/stock/candle?symbol={name}&resolution=D&from={start_date_str}&to={end_date_str}"
        api_url = f"https://finnhub.io/api/v1/quote?symbol={name}"
        response = request.get(api_url)
        return response.json()


if __name__ == "__main__":
     # Gold price
    print("Gold:")
    phys_price = Finnhub.current_price("PHYS")['c'] * 361291628 / 2849551
    print(phys_price)
